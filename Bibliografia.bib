% ICT energy consumption
@article{10.1145/3613207,
author = {Gelenbe, Erol},
title = {Electricity Consumption by ICT: Facts, trends, and measurements},
year = {2023},
issue_date = {August 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2023},
number = {August},
url = {https://doi.org/10.1145/3613207},
doi = {10.1145/3613207},
abstract = {This paper considers key issues surrounding energy consumption by information and communication technologies (ICT), which has been steadily growing and is now attaining approximately 10\% of the worldwide electricity consumption with a significant impact on greenhouse gas emissions. The perimeter of ICT systems is discussed, and the role of the subsystems that compose ICT is considered. Data from recent years is used to understand how each of these sub-systems contribute to ICT's energy consumption. The quantitatively demonstrated positive correlation between the penetration of ICT in the world's different economies and the same economies' contributions to undesirable greenhouse gas emissions is also discussed. The paper also examines how emerging technologies such as 5G, AI, edge computing, and cryptocurrencies are contributing to the worldwide increase in electricity consumption by ICT, despite the increases in ICT efficiency, in terms of energy consumed per bit processed, stored, or transmitted. The measurement of specific ICT systems' electricity consumption is also addressed, and the manner in which this consumption can be minimized in a specific edge computing context is discussed.},
journal = {Ubiquity},
articleno = {1},
numpages = {15}
}

@misc{ieaGlobalEnergy,
	author = {},
	title = {{G}lobal {E}nergy {C}risis – {T}opics - {I}{E}{A} --- iea.org},
	howpublished = {\url{https://www.iea.org/topics/global-energy-crisis}},
	year = {},
	note = {[Accessed 18-02-2024]},
}

@misc{europaDirective20222464,
	author = {},
	title = {{D}irective - 2022/2464 - {E}{N} - {C}{S}{R}{D} {D}irective - {E}{U}{R}-{L}ex --- eur-lex.europa.eu},
	howpublished = {\url{https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:32022L2464}},
	year = {},
	note = {[Accessed 18-02-2024]},
}

@misc{ifrsIFRSISSB,
	author = {},
	title = {{I}{F}{R}{S} - {I}{S}{S}{B} unanimously confirms {S}cope 3 {G}{H}{G} emissions disclosure requirements with strong application support, among key decisions --- ifrs.org},
	howpublished = {\url{https://www.ifrs.org/news-and-events/news/2022/10/issb-unanimously-confirms-scope-3-ghg-emissions-disclosure-requirements-with-strong-application-support-among-key-decisions/}},
	year = {},
	note = {[Accessed 18-02-2024]},
}
@misc{europaPressCorner,
	author = {},
	title = {{P}ress corner --- ec.europa.eu},
	howpublished = {\url{https://ec.europa.eu/commission/presscorner/detail/en/qanda_22_6229}},
	year = {},
	note = {[Accessed 17-01-2024]},
}
@article{ictimpact,
    title = {Impacts of Information and Communication Technologies on Environmental Sustainability: speculations and evidence},
    year = {2001},
    url = {https://web-archive.oecd.org/2012-06-15/168420-1897156.pdf},
    author = {Frans Berkhout and Julia Hertin},
}
@misc{blauerengelBlueAngel,
	author = {},
	title = {{B}lue {A}ngel, software products, resources and energy efficient, transparent interfaces | {B}lauer {E}ngel --- blauer-engel.de},
	howpublished = {\url{https://www.blauer-engel.de/en/productworld/resources-and-energy-efficient-software-products}},
	year = {},
	note = {[Accessed 15-01-2024]},
}
@article{theimpactofinformationtechnology,
author = {Gelenbe, Erol and Caseau, Yves},
title = {The impact of information technology on energy consumption and carbon emissions},
year = {2015},
issue_date = {June 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2015},
number = {June},
url = {https://doi.org/10.1145/2755977},
doi = {10.1145/2755977},
abstract = {In this article the authors evaluate the impact of different sectors of information and communication technologies (ICT) on energy consumption and CO2 emissions. ICT is understood to cover computer and peripheral equipment including local area networks, telecommunication equipment and networks, and data centers.},
journal = {Ubiquity},
articleno = {1},
numpages = {15}
}

@misc{whoElectronicWaste,
	author = {WHO},
	title = {{E}lectronic waste (e-waste) --- who.int},
	howpublished = {\url{https://www.who.int/news-room/fact-sheets/detail/electronic-waste-(e-waste)}},
	year = {2023},
	note = {[Accessed 15-08-2024]},
}

% Green coding
@Inbook{Calero2015,
author="Calero, Coral
and Piattini, Mario",
editor="Calero, Coral
and Piattini, Mario",
title="Introduction to Green in Software Engineering",
bookTitle="Green in Software Engineering",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="3--27",
abstract="Sustainability is gaining importance worldwide, reinforced by several initiatives with wide media coverage such as the Earth hour; this is a worldwide grassroots movement uniting people to protect the planet, organised by WWF (World Wide Fund for Nature). Other organisations such as the United Nations (UN) also highlight the importance of reducing energy consumption and our carbon footprint, including this issue in the Millennium Development Goals (MDGs). In Rio+20, the United Nations Conference on Sustainable Development, the world leaders approved an agreement entitled `The Future We Want', where it is stated that `We recognize the critical role of technology as well as the importance of promoting innovation, in particular in developing countries. We invite governments, as appropriate, to create enabling frameworks that foster environmentally sound technology, research and development, and innovation, including in support of green economy in the context of sustainable development and poverty eradication{\ldots}'.",
isbn="978-3-319-08581-4",
doi="10.1007/978-3-319-08581-4_1",
url="https://doi.org/10.1007/978-3-319-08581-4_1"
}
@InProceedings{modelforselected,
author="Dick, Markus
and Naumann, Stefan
and Kuhn, Norbert",
editor="Berleur, Jacques
and Hercheui, Magda David
and Hilty, Lorenz M.",
title="A Model and Selected Instances of Green and Sustainable Software",
booktitle="What Kind of Information Society? Governance, Virtuality, Surveillance, Sustainability, Resilience",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="248--259",
abstract="The power consumption of ICT is still increasing. To date it is not clear if the energy savings through ICT overbalance the energy consumption by ICT or not. Where manifold efforts of Green IT address the environmental aspects of sustainability considering computer hardware, there is a lack of models, descriptions, or realizations in the area of computer software. In this paper we present some results that form the basis towards a definition of the term ''Sustainable Software'', an outline of a process and lifecycle model for ''Green and Sustainable Software Engineering'', and six concrete instances of this model for practitioners.",
isbn="978-3-642-15479-9"
}

@inproceedings{softwareengineerginaspectsofgreen,
author = {Marimuthu, C. and Chandrasekaran, K.},
title = {Software Engineering Aspects of Green and Sustainable Software: A Systematic Mapping Study},
year = {2017},
isbn = {9781450348560},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3021460.3021464},
doi = {10.1145/3021460.3021464},
abstract = {Green and sustainable software engineering is an emerging research field which aims at creating, using, and disposing the energy-efficient software in an environment friendly manner with less negative impacts. The research community strongly believes that the energy efficiency and sustainability of the software can be improved by modifying the existing software engineering methods. This systematic mapping study identifies and map such methods for green and sustainable software development. Especially, this study identifies the research types, research goals, software engineering research topics, accepted validation methods and publication fora that are used in the field of green and sustainable software engineering. This study was conducted with 7 research questions and analyzed 82 relevant studies. We have used snowballing reading to find out the relevant studies that were published from 2010 to May, 2016. One of the important finding of this study is, there are less number of contributions on software design and construction. In future, sufficient research works and tools support must be provided to make this research field more matured. The main contribution of this study is to summarize the body of knowledge in the field of green and sustainable software engineering and provides a platform to conduct future research.},
booktitle = {Proceedings of the 10th Innovations in Software Engineering Conference},
pages = {34–44},
numpages = {11},
keywords = {systematic mapping study, green software, green and sustainable software engineering},
location = {Jaipur, India},
series = {ISEC '17}
}

@INPROCEEDINGS{sustainabledevelopmentsustainablesoftware,
  author={Johann, Timo and Dick, Markus and Kern, Eva and Naumann, Stefan},
  booktitle={2011 International Symposium on Humanities, Science and Engineering Research}, 
  title={Sustainable development, sustainable software, and sustainable software engineering: An integrated approach}, 
  year={2011},
  volume={},
  number={},
  pages={34-39},
  keywords={Manuals;Packaging;Software engineering;Hardware;Fires;Maintenance engineering;Sustainable Developnent;Life Cycle Thinking;Sustainable Software Engineerig;Green Software Engineering;Green IT},
  doi={10.1109/SHUSER.2011.6008495}}


@INPROCEEDINGS{energypatternsforweb,
  author={Rani, Pooja and Zellweger, Jonas and Kousadianos, Veronika and Cruz, Luis and Kehrer, Timo and Bacchelli, Alberto},
  booktitle={2024 IEEE/ACM 46th International Conference on Software Engineering: Software Engineering in Society (ICSE-SEIS)}, 
  title={Energy Patterns for Web: An Exploratory Study}, 
  year={2024},
  volume={},
  number={},
  pages={12-22},
  keywords={Energy consumption;Source coding;Pipelines;Companies;Software;Mobile applications;Software measurement;Green Software Engineering;Energy patterns;Web applications;Software sustainability;Coding Practices;Energy consumption},
  doi={}}

@ARTICLE {wirth,
author = {N. Wirth},
journal = {Computer},
title = {A Plea for Lean Software},
year = {1995},
volume = {28},
number = {02},
issn = {1558-0814},
pages = {64-68},
keywords = {},
doi = {10.1109/2.348001},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
}

@misc{mitvidi,
	author = {Eerika Heinonen and Sonja Lankiniemi and Maiju Jokinen and Matias Lehtonen and Leena Telkkinen and Jenni Kanervo and Kimmo Tarkkanen and Anne-Maria Tuikka and Lauri Kivimäki and Tuomas Mäkilä and Veeti Koivuniemi and Antti Sipilä and Sohvi Hellsten and Laura Partanen
},
	title = {Ekologisesti kestävien julkisten ohjelmistohankintojen opas},
	howpublished = {\url{https://www.theseus.fi/handle/10024/806728}},
	year = {2023},
	note = {[Accessed 15-01-2024]},
}
@misc{kriteeripankkiSoftwareServices,
	author = {},
	title = {{S}oftware services | {K}riteeripankki --- kriteeripankki.fi},
	howpublished = {\url{https://kriteeripankki.fi/en/t/54}},
	year = {},
	note = {[Accessed 13-10-2024]},
}

@article{PEREIRA2021102609,
title = {Ranking programming languages by energy efficiency},
journal = {Science of Computer Programming},
volume = {205},
pages = {102609},
year = {2021},
issn = {0167-6423},
doi = {https://doi.org/10.1016/j.scico.2021.102609},
url = {https://www.sciencedirect.com/science/article/pii/S0167642321000022},
author = {Rui Pereira and Marco Couto and Francisco Ribeiro and Rui Rua and Jácome Cunha and João Paulo Fernandes and João Saraiva},
keywords = {Energy efficiency, Programming languages, Language benchmarking, Green software},
abstract = {This paper compares a large set of programming languages regarding their efficiency, including from an energetic point-of-view. Indeed, we seek to establish and analyze different rankings for programming languages based on their energy efficiency. The goal of being able to rank programming languages based on their energy efficiency is both recent, and certainly deserves further studies. We have taken rigorous and strict solutions to 10 well defined programming problems, expressed in (up to) 27 programming languages, from the well known Computer Language Benchmark Game repository. This repository aims to compare programming languages based on a strict set of implementation rules and configurations for each benchmarking problem. We have also built a framework to automatically, and systematically, run, measure and compare the energy, time, and memory efficiency of such solutions. Ultimately, it is based on such comparisons that we propose a series of efficiency rankings, based on single and multiple criteria. Our results show interesting findings, such as how slower/faster languages can consume less/more energy, and how memory usage influences energy consumption. We also present a simple way to use our results to provide software engineers and practitioners support in deciding which language to use when energy efficiency is a concern. In addition, we further validate our results and rankings against implementations from a chrestomathy program repository, Rosetta Code., by reproducing our methodology and benchmarking system. This allows us to understand how the results and conclusions from our rigorously and well defined benchmarked programs compare to those based on more representative and real-world implementations. Indeed our results show that the rankings do not change apart from one programming language.}
}

@inproceedings{10.1145/3136014.3136031,
author = {Pereira, Rui and Couto, Marco and Ribeiro, Francisco and Rua, Rui and Cunha, J\'{a}come and Fernandes, Jo\~{a}o Paulo and Saraiva, Jo\~{a}o},
title = {Energy efficiency across programming languages: how do energy, time, and memory relate?},
year = {2017},
isbn = {9781450355254},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3136014.3136031},
doi = {10.1145/3136014.3136031},
abstract = {This paper presents a study of the runtime, memory usage and energy consumption of twenty seven well-known software languages. We monitor the performance of such languages using ten different programming problems, expressed in each of the languages. Our results show interesting findings, such as, slower/faster languages consuming less/more energy, and how memory usage influences energy consumption. Finally, we show how to use our results to provide software engineers support to decide which language to use when energy efficiency is a concern.},
booktitle = {Proceedings of the 10th ACM SIGPLAN International Conference on Software Language Engineering},
pages = {256–267},
numpages = {12},
keywords = {Programming Languages, Language Benchmarking, Green Software, Energy Efficiency},
location = {Vancouver, BC, Canada},
series = {SLE 2017}
}

@inproceedings{10.1145/3125374.3125382,
author = {Couto, Marco and Pereira, Rui and Ribeiro, Francisco and Rua, Rui and Saraiva, Jo\~{a}o},
title = {Towards a Green Ranking for Programming Languages},
year = {2017},
isbn = {9781450353892},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3125374.3125382},
doi = {10.1145/3125374.3125382},
abstract = {While in the past the primary goal to optimize software was the run time optimization, nowadays there is a growing awareness of the need to reduce energy consumption. Additionally, a growing number of developers wish to become more energy-aware when programming and feel a lack of tools and the knowledge to do so.In this paper we define a ranking of energy efficiency in programming languages. We consider a set of computing problems implemented in ten well-known programming languages, and monitored the energy consumed when executing each language. Our preliminary results show that although the fastest languages tend to be the lowest consuming ones, there are other interesting cases where slower languages are more energy efficient than faster ones.},
booktitle = {Proceedings of the 21st Brazilian Symposium on Programming Languages},
articleno = {7},
numpages = {8},
keywords = {Programming Languages, Language Benchmarking, Green Software, Energy Efficiency},
location = {Fortaleza, CE, Brazil},
series = {SBLP '17}
}

@ARTICLE{mobilecomplaints,
  author={Khalid, Hammad and Shihab, Emad and Nagappan, Meiyappan and Hassan, Ahmed E.},
  journal={IEEE Software}, 
  title={What Do Mobile App Users Complain About?}, 
  year={2015},
  volume={32},
  number={3},
  pages={70-77},
  keywords={Computer crashes;Privacy;Mobile communication;Tagging;Computer applications;Software quality;Quality assurance;Software engineering;mobile applications;software quality;user reviews;quality assurance;software engineering},
  doi={10.1109/MS.2014.50}}

@article{Challenges,
author = {Lago, Patricia and Kazman, Rick and Meyer, Niklaus and Morisio, Maurizio and M\"{u}ller, Hausi A. and Paulisch, Frances},
title = {Exploring initial challenges for green software engineering: summary of the first GREENS workshop, at ICSE 2012},
year = {2013},
issue_date = {January 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {1},
issn = {0163-5948},
url = {https://doi.org/10.1145/2413038.2413062},
doi = {10.1145/2413038.2413062},
abstract = {The GREENS workshop provides a forum for practitioners and academics to share knowledge, ideas, practices and current results related to green and sustainable software engineering. This first workshop was held at ICSE 2012 in Zurich, Switzerland. It featured a keynote talk, twelve research position statements and two breakout sessions that discussed topics that ranged from bringing sustainability and energy efficiency into all software lifecycle stages, to green measures and estimations, practices, notations, and tools to both greening the software engineering process, and greening the resulting Information and Communication Technology systems. This report presents the themes of the workshop, summarizes the results of the discussions held in the breakout sessions, as well as the identified research challenges.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {01},
pages = {31–33},
numpages = {3},
keywords = {sustainability, software engineering, green IT, energy efficiency}
}

@inproceedings{softwareindustryawarness,
author = {Karita, Leila and Mour\~{a}o, Brunna C. and Machado, Ivan},
title = {Software industry awareness on green and sustainable software engineering: a state-of-the-practice survey},
year = {2019},
isbn = {9781450376518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3350768.3350770},
doi = {10.1145/3350768.3350770},
abstract = {Sustainable computing is a rapidly growing research area spanning several areas of computer science. In the software engineering field, the topic has received increasing attention in recent years, with several studies addressing a range of concerns. However, few studies have demonstrated the awareness of software practitioners about the underlying concepts of sustainability in the software development practice. In this effect, in this study, we aim to provide some evidence about the practitioners' perception about the adoption of sustainability in software development, under four main perspectives: economic, social, environmental and technical. To accomplish such a goal, we carried out a survey study with twenty-five software engineers involved in projects in different domains. The yielded results indicate an overall lack of knowledge about the topic, in particular regarding the concepts about sustainable software, although it is a common understanding that sustainability should be treated as a quality attribute and should support the interaction between sustainability and the software development life cycle phases. Among the observed perspectives, the respondents indicate that the technical dimension is the most relevant and explored so far. This study contributes to the field with initial evidence and can be seen as a first step towards establishing a common understanding about how the software industry is receptive to the use of sustainability concepts in software development practices.},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
pages = {501–510},
numpages = {10},
keywords = {Empirical Study, Survey, Sustainable Software Engineering},
location = {Salvador, Brazil},
series = {SBES '19}
}

@Misc{Nurmivaara2023,
author={Nurmivaara, Sami},
title={Green in Software Engineering : A Systematic Literature Review},
year={2023},
publisher={Helsingin yliopisto;University of Helsinki;Helsingfors universitet},
keywords={software engineering;green IT;environmental sustainability;climate change;systematic literature review},
abstract={Introduction: The issue of climate change has emerged as a global challenge in response to the increasing consumption of natural resources. As the Information Technology (IT) sector has undergone significant growth in recent years, the implementation of environmentally sustainable practices which lower the environmental impact of software, such as electricity usage, has become imperative. The concept of green in software engineering seeks to address these challenges in the software engineering process. Methods: As the goal is to explore and evaluate different approaches to environmental sustainability in green in software engineering whilst also taking a look into the maturity and evidence level of research about the subject, this study adopts a systematic literature review approach. The search strings, search process and other relevant information are meticulously documented and explored in each step of the research process. Results: Green in software engineering has been identified as a promising field of research, but the absence of agreed-upon definitions and terminology often leads to research efforts replicating the previous studies without a clear reason as to why. The goal of increasing environmental sustainability is commonly agreed on in software engineering, but the concrete steps to achieve it are currently missing. Building a strong body of knowledge, common measurements and tooling to support them and increasing the knowledge about sustainability in the field of software engineering should all be taken into account in an effort to reach the environmental sustainability goals of tomorrow.},
url={URN:NBN:fi:hulib-202306132611;http://hdl.handle.net/10138/358772},
language={eng}
}

@inproceedings{empiricalstudyonpracticioners,
author = {Manotas, Irene and Bird, Christian and Zhang, Rui and Shepherd, David and Jaspan, Ciera and Sadowski, Caitlin and Pollock, Lori and Clause, James},
title = {An empirical study of practitioners' perspectives on green software engineering},
year = {2016},
isbn = {9781450339001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2884781.2884810},
doi = {10.1145/2884781.2884810},
abstract = {The energy consumption of software is an increasing concern as the use of mobile applications, embedded systems, and data center-based services expands. While research in green software engineering is correspondingly increasing, little is known about the current practices and perspectives of software engineers in the field. This paper describes the first empirical study of how practitioners think about energy when they write requirements, design, construct, test, and maintain their software. We report findings from a quantitative, targeted survey of 464 practitioners from ABB, Google, IBM, and Microsoft, which was motivated by and supported with qualitative data from 18 in-depth interviews with Microsoft employees. The major findings and implications from the collected data contextualize existing green software engineering research and suggest directions for researchers aiming to develop strategies and tools to help practitioners improve the energy usage of their applications.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering},
pages = {237–248},
numpages = {12},
keywords = {empirical study, green software engineering, survey},
location = {Austin, Texas},
series = {ICSE '16}
}

@inproceedings{miningquestions,
author = {Pinto, Gustavo and Castor, Fernando and Liu, Yu David},
title = {Mining questions about software energy consumption},
year = {2014},
isbn = {9781450328630},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2597073.2597110},
doi = {10.1145/2597073.2597110},
abstract = {A growing number of software solutions have been proposed to address application-level energy consumption problems in the last few years. However, little is known about how much software developers are concerned about energy consumption, what aspects of energy consumption they consider important, and what solutions they have in mind for improving energy efficiency. In this paper we present the first empirical study on understanding the views of application programmers on software energy consumption problems. Using StackOverflow as our primary data source, we analyze a carefully curated sample of more than 300 questions and 550 answers from more than 800 users. With this data, we observed a number of interesting findings. Our study shows that practitioners are aware of the energy consumption problems: the questions they ask are not only diverse -- we found 5 main themes of questions -- but also often more interesting and challenging when compared to the control question set. Even though energy consumption-related questions are popular when considering a number of different popularity measures, the same cannot be said about the quality of their answers. In addition, we observed that some of these answers are often flawed or vague. We contrast the advice provided by these answers with the state-of-the-art research on energy consumption. Our summary of software energy consumption problems may help researchers focus on what matters the most to software developers and end users.},
booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
pages = {22–31},
numpages = {10},
keywords = {Software Energy Consumption, Q&A, Practitioners},
location = {Hyderabad, India},
series = {MSR 2014}
}

@inproceedings{studyoninfluenceofsoftware,
author = {Rajan, Ajitha and Noureddine, Adel and Stratis, Panagiotis},
title = {A Study on the Influence of Software and Hardware Features on Program Energy},
year = {2016},
isbn = {9781450344272},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2961111.2962593},
doi = {10.1145/2961111.2962593},
abstract = {Software energy consumption has emerged as a growing concern in recent years. Managing the energy consumed by a software is, however, a difficult challenge due to the large number of factors affecting it -- namely, features of the processor, memory, cache, and other hardware components, characteristics of the program and the workload running, OS routines, compiler optimisations, among others. In this paper we study the relevance of numerous architectural and program features (static and dynamic) to the energy consumed by software. The motivation behind the study is to gain an understanding of the features affecting software energy and to provide recommendations on features to optimise for energy efficiency.In our study we used 58 subject desktop programs, each with their own workload, and from different application domains. We collected over 100 hardware and software metrics, statically and dynamically, using existing tools for program analysis, instrumentation and run time monitoring. We then performed statistical feature selection to extract the features relevant to energy consumption. We discuss potential optimisations for the selected features. We also examine whether the energy-relevant features are different from those known to affect software performance. The features commonly selected in our experiments were execution time, cache accesses, memory instructions, context switches, CPU migrations, and program length (Halstead metric). All of these features are known to affect software performance, in terms of running time, power consumed and latency.},
booktitle = {Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {37},
numpages = {10},
location = {Ciudad Real, Spain},
series = {ESEM '16}
}

@article{energyefficiencyanewconcern,
author = {Pinto, Gustavo and Castor, Fernando},
title = {Energy efficiency: a new concern for application software developers},
year = {2017},
issue_date = {December 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {60},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/3154384},
doi = {10.1145/3154384},
abstract = {Development of energy-efficient software is hindered by a lack of knowledge and a lack of tools.},
journal = {Commun. ACM},
month = {11},
pages = {68–75},
numpages = {8}
}

@inproceedings{influenceofjava,
author = {Pereira, Rui and Couto, Marco and Saraiva, Jo\~{a}o and Cunha, J\'{a}come and Fernandes, Jo\~{a}o Paulo},
title = {The influence of the Java collection framework on overall energy consumption},
year = {2016},
isbn = {9781450341615},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2896967.2896968},
doi = {10.1145/2896967.2896968},
abstract = {This paper presents a detailed study of the energy consumption of the different Java Collection Framework (JFC) implementations. For each method of an implementation in this framework, we present its energy consumption when handling different amounts of data. Knowing the greenest methods for each implementation, we present an energy optimization approach for Java programs: based on calls to JFC methods in the source code of a program, we select the greenest implementation. Finally, we present preliminary results of optimizing a set of Java programs where we obtained 6.2\% energy savings.},
booktitle = {Proceedings of the 5th International Workshop on Green and Sustainable Software},
pages = {15–21},
numpages = {7},
keywords = {energy-aware software, green computing},
location = {Austin, Texas},
series = {GREENS '16}
}

@inproceedings{energyprofilesofjavacollections,
author = {Hasan, Samir and King, Zachary and Hafiz, Munawar and Sayagh, Mohammed and Adams, Bram and Hindle, Abram},
title = {Energy profiles of Java collections classes},
year = {2016},
isbn = {9781450339001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2884781.2884869},
doi = {10.1145/2884781.2884869},
abstract = {We created detailed profiles of the energy consumed by common operations done on Java List, Map, and Set abstractions. The results show that the alternative data types for these abstractions differ significantly in terms of energy consumption depending on the operations. For example, an ArrayList consumes less energy than a LinkedList if items are inserted at the middle or at the end, but consumes more energy than a LinkedList if items are inserted at the start of the list. To explain the results, we explored the memory usage and the bytecode executed during an operation. Expensive computation tasks in the analyzed bytecode traces appeared to have an energy impact, but memory usage did not contribute. We evaluated our profiles by using them to selectively replace Collections types used in six applications and libraries. We found that choosing the wrong Collections type, as indicated by our profiles, can cost even 300\% more energy than the most efficient choice. Our work shows that the usage context of a data structure and our measured energy profiles can be used to decide between alternative Collections implementations.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering},
pages = {225–236},
numpages = {12},
keywords = {energy profile, collections, Java, API},
location = {Austin, Texas},
series = {ICSE '16}
}

@INPROCEEDINGS{systemicliteraturereview,
  author={Calero, Coral and Bertoa, Manuel F. and Moraga, Ma Ángeles},
  booktitle={2013 2nd International Workshop on Green and Sustainable Software (GREENS)}, 
  title={A systematic literature review for software sustainability measures}, 
  year={2013},
  volume={},
  number={},
  pages={46-53},
  keywords={Software;Software measurement;Green products;Abstracts;Libraries;Systematics;Quality assessment;Sustainability Measures;Sustainability Indicators;Systematic Literature Review;Quality Model;Sustainability Models},
  doi={10.1109/GREENS.2013.6606421}}

@inproceedings{towardsgreenranking,
author = {Couto, Marco and Pereira, Rui and Ribeiro, Francisco and Rua, Rui and Saraiva, Jo\~{a}o},
title = {Towards a Green Ranking for Programming Languages},
year = {2017},
isbn = {9781450353892},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3125374.3125382},
doi = {10.1145/3125374.3125382},
abstract = {While in the past the primary goal to optimize software was the run time optimization, nowadays there is a growing awareness of the need to reduce energy consumption. Additionally, a growing number of developers wish to become more energy-aware when programming and feel a lack of tools and the knowledge to do so.In this paper we define a ranking of energy efficiency in programming languages. We consider a set of computing problems implemented in ten well-known programming languages, and monitored the energy consumed when executing each language. Our preliminary results show that although the fastest languages tend to be the lowest consuming ones, there are other interesting cases where slower languages are more energy efficient than faster ones.},
booktitle = {Proceedings of the 21st Brazilian Symposium on Programming Languages},
articleno = {7},
numpages = {8},
keywords = {Programming Languages, Language Benchmarking, Green Software, Energy Efficiency},
location = {Fortaleza, CE, Brazil},
series = {SBLP '17}
}
@inproceedings{virtualmachines,
author = {Carrega, A. and Repetto, M.},
title = {Exploiting novel software development paradigms to increase the sustainability of data centers},
year = {2016},
isbn = {9781450346160},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2996890.3007878},
doi = {10.1145/2996890.3007878},
abstract = {The application of effective energy management strategies in data centers is often hindered by the substantial conflict between the interests of cloud users and infrastructure owners. As a matter of fact, cloud users require that the service level they are paying for is tightly met, whereas data center owners try to cut down their operational expenses.In this paper, we propose a novel consolidation algorithm that exploits emerging software development paradigms. Our approach enables cloud users to indicate their willingness to apply energy saving mechanisms to some of their virtual resources, hence giving infrastructure managers the ability to apply more efficient workload consolidation and to switch their hardware to very low-power states. The result is an optimal trade-off between energy consumption and performance.},
booktitle = {Proceedings of the 9th International Conference on Utility and Cloud Computing},
pages = {310–315},
numpages = {6},
keywords = {consolidation algorithms, energy efficiency, green data centers, software development paradigms},
location = {Shanghai, China},
series = {UCC '16}
}
@INPROCEEDINGS{investigatingtheimpactofweb,
  author={Manotas, Irene and Sahin, Cagri and Clause, James and Pollock, Lori and Winbladh, Kristina},
  booktitle={2013 2nd International Workshop on Green and Sustainable Software (GREENS)}, 
  title={Investigating the impacts of web servers on web application energy usage}, 
  year={2013},
  volume={},
  number={},
  pages={16-23},
  keywords={Web servers;Energy consumption;Calendars;Context;Browsers;Energy usage;Web applications;empirical studies},
  doi={10.1109/GREENS.2013.6606417}}
  
@INPROCEEDINGS{twinsorfalseffriends,
  author={Weber, Max and Kaltenecker, Christian and Sattler, Florian and Apel, Sven and Siegmund, Norbert},
  booktitle={2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)}, 
  title={Twins or False Friends? A Study on Energy Consumption and Performance of Configurable Software}, 
  year={2023},
  volume={},
  number={},
  pages={2098-2110},
  keywords={Energy consumption;Runtime;Correlation;Energy measurement;Software systems;Time measurement;Software measurement;energy consumption;performance;configurability;correlation},
  doi={10.1109/ICSE48619.2023.00177}}

@article{guidelines,
title = {Green IT – Available data and guidelines for reducing energy consumption in IT systems},
journal = {Sustainable Computing: Informatics and Systems},
volume = {4},
number = {1},
pages = {24-32},
year = {2014},
issn = {2210-5379},
doi = {https://doi.org/10.1016/j.suscom.2013.09.001},
url = {https://www.sciencedirect.com/science/article/pii/S2210537913000504},
author = {Luca Ardito and Maurizio Morisio},
keywords = {Green IT, Power management, Energy efficiency, ICT energy reduction, Software energy, Consumption},
abstract = {Nowadays saving energy is an interdisciplinary key challenge. Green IT deals with saving energy in IT systems, and is rapidly gaining momentum. Hardware manufacturers and designers have first considered the problem, in the field of IT, but recently software energy efficiency gathered the interest of industry and academic research. In this paper we aim at summarizing the available knowledge in Green IT. In particular we:•Introduce a taxonomy of concepts related to energy and IT.•Present recent data on energy consumption trends organized according to the taxonomy.•Present some guidelines to write energy efficient software organized according to the taxonomy.•Underline what is missing and what should be done in future research.}
}

@ARTICLE{impactofgreenfeedback,
  author={Noureddine, Adel and Lodeiro, Martín Diéguez and Bru, Noëlle and Chbeir, Richard},
  journal={IEEE Transactions on Sustainable Computing}, 
  title={The Impact of Green Feedback on Users’ Software Usage}, 
  year={2023},
  volume={8},
  number={2},
  pages={280-292},
  keywords={Software;Behavioral sciences;Energy consumption;Air pollution;Green products;Software systems;Measurement;Energy consumption;behavioral change;green software;field experiment},
  doi={10.1109/TSUSC.2022.3222631}}

@misc{greensoftwareGreenSoftware,
	author = {},
	title = {{G}reen {S}oftware {P}atterns | {G}reen {S}oftware {P}atterns --- patterns.greensoftware.foundation},
	howpublished = {\url{https://patterns.greensoftware.foundation/}},
	year = {},
	note = {[Accessed 17-11-2024]},
}
@article{serverless,
author = {Sharma, Prateek},
title = {Challenges and Opportunities in Sustainable Serverless Computing},
year = {2023},
issue_date = {October 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {3},
url = {https://doi.org/10.1145/3630614.3630624},
doi = {10.1145/3630614.3630624},
abstract = {Serverless computing has rapidly emerged as a popular deployment model. However, its energy and carbon implications are unclear and require exploration. This paper takes a look at the fundamental distinguishing attributes of serverless functions, and shows how some of them make energy-efficiency challenging. The programming model and deployment requirements of serverless functions makes them terribly energy inefficient---consuming more than 15\texttimes{} energy compared to conventional web services. On the bright side, FaaS is still actively expanding, and there is also an opportunity for rethinking FaaS resource management and deployment models, and make carbon efficiency a primary consideration. We present a few such techniques: moving functions to energy-friendly locations in distributed edge clouds; machine learning based modeling and control; and function-level demand response that combines ideas from approximate computing. Together, these represent a possible path forward to making serverless cloud computing sustainable.},
journal = {SIGENERGY Energy Inform. Rev.},
month = oct,
pages = {53–58},
numpages = {6},
keywords = {functions as a service, carbon footprint}
}
@inproceedings{serverless2,
author = {Alhindi, Abdulaziz and Djemame, Karim and Heravan, Fatemeh},
year = {2022},
month = {10},
pages = {},
title = {On the Power Consumption of Serverless Functions: An Evaluation of OpenFaaS},
doi = {10.1109/UCC56403.2022.00064}
}
% /green coding

% Benchmarks
@misc{webframeworksbenchmarkFrameworksBenchmark,
	author = {},
	title = {{W}eb {F}rameworks {B}enchmark --- web-frameworks-benchmark.netlify.app},
	howpublished = {\url{https://web-frameworks-benchmark.netlify.app/compare?f=fastify,express,hono}},
	year = {},
	note = {[Accessed 18-02-2024]},
}

@misc{snykNodejsDeno,
	author = {},
	title = {{N}ode.js vs. {D}eno vs. {B}un: {J}ava{S}cript runtime comparison | {S}nyk --- snyk.io},
	howpublished = {\url{https://snyk.io/blog/javascript-runtime-compare-node-deno-bun/}},
	year = {},
	note = {[Accessed 18-02-2024]},
}

@misc{mongodbpostgresql,
	author = {Álvaro Hernández Tortosa and Francis del Carmen Santiago Cermeño and Emanuel Calvo and Gerardo
Herzig and Sergio Alejandro Ostapowicz and Matteo Melli and Jorge Daniel Fernández},
	title = {PERFORMANCE BENCHMARK POSTGRESQL / MONGODB},
	howpublished = {\url{https://info.enterprisedb.com/rs/069-ALB-339/images/PostgreSQL_MongoDB_Benchmark-WhitepaperFinal.pdf}},
	year = {2019},
	note = {[Accessed 18-02-2024]},
}

@misc{phoronixBenchmarkingExperimental,
	author = {},
	title = {{B}enchmarking {T}he {E}xperimental {U}buntu x86-64-v3 {B}uild {F}or {G}reater {P}erformance {O}n {M}odern {C}{P}{U}s --- phoronix.com},
	howpublished = {\url{https://www.phoronix.com/review/ubuntu-x86-64-v3-benchmark}},
	year = {},
	note = {[Accessed 18-01-2024]},
}

@conference{bunvsnodevsdeno,
author={Juan {J. Merelo{-}Guervós}. and Mario García{-}Valdez. and Pedro Castillo.},
title={An Analysis of Energy Consumption of JavaScript Interpreters with Evolutionary Algorithm Workloads},
booktitle={Proceedings of the 18th International Conference on Software Technologies - ICSOFT},
year={2023},
pages={175-184},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0012128100003538},
isbn={978-989-758-665-1},
issn={2184-2833},
}
% /benchmarks

% Agile
@book{scrumguide,
	author = {Ken Schwaber and Jeff Sutherland},
	title = {The Scrum Guide},
	howpublished = {\url{https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-US.pdf}},
	year = {2020},
}
@misc{scrumWhatScrum,
	author = {},
	title = {{W}hat is {S}crum? --- scrum.org},
	howpublished = {\url{https://www.scrum.org/resources/what-scrum-module}},
	year = {},
	note = {[Accessed 11-03-2024]},
}
@misc{extremeprogrammingFlowChart,
	author = {Don Wells},
	title = {{X}{P} flow {C}hart --- extremeprogramming.org},
	howpublished = {\url{http://www.extremeprogramming.org/map/project.html}},
	year = {},
	note = {[Accessed 10-03-2024]},
}
@misc{extremeprogrammingExtremeProgramming,
	author = {Don Wells},
	title = {{E}xtreme {P}rogramming {R}ules --- extremeprogramming.org},
	howpublished = {\url{http://www.extremeprogramming.org/rules.html}},
	year = {},
	note = {[Accessed 10-03-2024]},
}
@book{essentialscrum,
author = {Rubin, Kenneth S.},
title = {Essential Scrum: A Practical Guide to the Most Popular Agile Process},
year = {2012},
isbn = {0137043295},
publisher = {Addison-Wesley Professional},
edition = {1st},
abstract = {A Practical Guide to the Most Popular Agile Process The Single-Source, Comprehensive Guide to Scrum for All Team Members, Managers, and Executives If you want to use Scrum to develop innovative products and services that delight your customers, Essential Scrum is the complete, single-source reference youve been searching for. Leading Scrum coach and trainer Kenny Rubin illuminates the values, principles, and practices of Scrum, and describes flexible, proven approaches that can help you implement it far more effectively. Whether you are new to Scrum or years into your use, this book will introduce, clarify, and deepen your Scrum knowledge at the team, product, and portfolio levels. Drawing from Rubins experience helping hundreds of organizations succeed with Scrum, this book provides easy-to-digest descriptions enhanced by more than two hundred illustrations based on an entirely new visual icon language for describing Scrums roles, artifacts, and activities. Essential Scrum will provide every team member, manager, and executive with a common understanding of Scrum, a shared vocabulary they can use in applying it, and practical knowledge for deriving maximum value from it.}
}

@article{empiricalstudyofagile,
author = {Matharu, Gurpreet Singh and Mishra, Anju and Singh, Harmeet and Upadhyay, Priyanka},
title = {Empirical Study of Agile Software Development Methodologies: A Comparative Analysis},
year = {2015},
issue_date = {January 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {1},
issn = {0163-5948},
url = {https://doi.org/10.1145/2693208.2693233},
doi = {10.1145/2693208.2693233},
abstract = {In today's software industry, technological prowess and ever-evolving customer requirements have led to more complex software demands. Agile based software development is increasingly being adopted by the software practitioners as it assures early software development and high quality software products. Also, it offers responsiveness to changes in user requirements, providing for their quick absorption during software development. In this paper, we elaborate the significance, benefits and increasing adoption of Agile methodologies in context of today's complex and evolving software demands. The main objective of this paper is to conduct an empirical study into the choice among the most popular Agile methodologies, Scrum, Extreme Programming and Kanban. Further, this paper provides for a comparative analysis among various agile software development methodologies. Our survey results reveal higher adoption of Scrum based development in present-day software industry as compared to Extreme Programming and Kanban methodologies.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {02},
pages = {1–6},
numpages = {6},
keywords = {Agile Methodologies, Extreme Programming (XP), Kanban, Lean, Scrum, Software Development Life Cycle (SDLC)}
}

@INPROCEEDINGS{usageandperceptions,
  author={Begel, Andrew and Nagappan, Nachiappan},
  booktitle={First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007)}, 
  title={Usage and Perceptions of Agile Software Development in an Industrial Context: An Exploratory Study}, 
  year={2007},
  volume={},
  number={},
  pages={255-264},
  keywords={Programming;Computer industry;Variable speed drives;Software engineering;Gain measurement;Software measurement;Large-scale systems;Collaborative software;Testing;Productivity},
  doi={10.1109/ESEM.2007.12}}
  
@article{agilemethodsinembedded,
author = {Salo, Outi and Abrahamsson, Pekka},
year = {2008},
month = {03},
pages = {58 - 64},
title = {Agile methods in European embedded software development organisations: A survey on the actual use and usefulness of Extreme Programming and Scrum},
volume = {2},
journal = {Software, IET},
doi = {10.1049/iet-sen:20070038}
}
% /Agile

% Green agile
@article{greensoft,
    title = {The GREENSOFT Model: A reference model for green and sustainable software and its engineering},
    journal = {Sustainable Computing: Informatics and Systems},
    volume = {1},
    number = {4},
    pages = {294-304},
    year = {2011},
    issn = {2210-5379},
    doi = {https://doi.org/10.1016/j.suscom.2011.06.004},
    url = {https://www.sciencedirect.com/science/article/pii/S2210537911000473},
    author = {Stefan Naumann and Markus Dick and Eva Kern and Timo Johann},
    keywords = {Green Software, Green IT, Green by IT, Software Engineering, GREENSOFT Reference Model},
    abstract = {The resource and power consumption of ICT is still increasing, but also the benefits of ICT, e.g. in finding more efficient solutions for environmental problems. To date, it is not clear, whether the resource and energy savings through ICT overbalance the resource and energy consumption by ICT, or not. Up to now, manifold efforts of Green IT address the environmental aspects of sustainability considering computer hardware. However, there is still a lack of models, descriptions or realizations in the area of computer software and software process models. In our contribution, we first propose definitions of the terms “Green and Sustainable Software” and “Green and Sustainable Software Engineering”, then we outline a conceptual reference model, the GREENSOFT Model. This model includes a cradle-to-grave product life cycle model for software products, sustainability metrics and criteria for software, software engineering extensions for sustainably sound software design and development, as well as appropriate guidance.}
}

@article{greenmodelforsustainable,
author = {Mahmoud, S.S. and Ahmad, I.},
year = {2013},
month = {01},
pages = {55-74},
title = {A green model for sustainable software engineering},
volume = {7},
journal = {International Journal of Software Engineering and its Applications}
}

@inproceedings{assesmentcriteriaforsustainable,
author = {Wahler, Michael and Seyff, Norbert and Soriano Ramirez, Maria Susana},
title = {Exploring Assessment Criteria for Sustainable Software Engineering Processes},
year = {2024},
isbn = {9798400704994},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3639475.3640109},
doi = {10.1145/3639475.3640109},
abstract = {It is our duty as software engineers to understand our contribution towards sustainability and ultimately assess and improve the sustainability of the software engineering (SE) processes we apply. However, commonly established criteria for such an assessment are currently lacking. In this experience report, we share insights from our investigation into the sustainability of software engineering processes, focusing on a collaborative project with an industry partner. Our research delves into lessons learned while exploring this critical issue. Our contribution lies in the introduction of an initial framework, which includes assessment criteria as the core element, and on the results of using this framework to assess the software engineering process of our industry partner. By sharing our experiences and findings, we aim to contribute to the understanding of sustainable software engineering practices and stimulate dialogue on how software engineering can address societal and environmental challenges. Our work underscores the significance of adopting sustainable practices and encourages the software engineering community---in both academia and industry---to embrace a proactive role in advancing sustainability for society.},
booktitle = {Proceedings of the 46th International Conference on Software Engineering: Software Engineering in Society},
pages = {107–117},
numpages = {11},
keywords = {software engineering, sustainability, criteria, assessment},
location = {Lisbon, Portugal},
series = {ICSE-SEIS'24}
}

@ARTICLE{greenagilematurity,
  author={Rashid, Nasir and Khan, Siffat Ullah and Khan, Habib Ullah and Ilyas, Muhammad},
  journal={IEEE Access}, 
  title={Green-Agile Maturity Model: An Evaluation Framework for Global Software Development Vendors}, 
  year={2021},
  volume={9},
  number={},
  pages={71868-71886},
  keywords={Software;Green products;Organizations;Capability maturity model;Sustainable development;Computational modeling;Energy efficiency;Agile software development;green and sustainable software;green-agile maturity model (GAMM);global software development (GSD);agile methods},
  doi={10.1109/ACCESS.2021.3079194}}

% /Green agile
% Measurement
@INPROCEEDINGS{8716456,
  author={Ghaleb, Taher Ahmed},
  booktitle={2019 International Conference on Computer and Information Sciences (ICCIS)}, 
  title={Software Energy Measurement at Different Levels of Granularity}, 
  year={2019},
  volume={},
  number={},
  pages={1-6},
  keywords={Energy measurement;Software;Hardware;Software measurement;Tools;Power measurement;Energy consumption;Energy consumption;Software sustainability;Power measurement;Energy efficiency},
  doi={10.1109/ICCISci.2019.8716456}}
  
  @inproceedings{studyoninfluence,
author = {Rajan, Ajitha and Noureddine, Adel and Stratis, Panagiotis},
title = {A Study on the Influence of Software and Hardware Features on Program Energy},
year = {2016},
isbn = {9781450344272},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2961111.2962593},
doi = {10.1145/2961111.2962593},
abstract = {Software energy consumption has emerged as a growing concern in recent years. Managing the energy consumed by a software is, however, a difficult challenge due to the large number of factors affecting it -- namely, features of the processor, memory, cache, and other hardware components, characteristics of the program and the workload running, OS routines, compiler optimisations, among others. In this paper we study the relevance of numerous architectural and program features (static and dynamic) to the energy consumed by software. The motivation behind the study is to gain an understanding of the features affecting software energy and to provide recommendations on features to optimise for energy efficiency.In our study we used 58 subject desktop programs, each with their own workload, and from different application domains. We collected over 100 hardware and software metrics, statically and dynamically, using existing tools for program analysis, instrumentation and run time monitoring. We then performed statistical feature selection to extract the features relevant to energy consumption. We discuss potential optimisations for the selected features. We also examine whether the energy-relevant features are different from those known to affect software performance. The features commonly selected in our experiments were execution time, cache accesses, memory instructions, context switches, CPU migrations, and program length (Halstead metric). All of these features are known to affect software performance, in terms of running time, power consumed and latency.},
booktitle = {Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {37},
numpages = {10},
location = {Ciudad Real, Spain},
series = {ESEM '16}
}

@inproceedings{slronmetrics,
  title={A systematic literature review on green software metrics},
  author={Paolo Bozzelli and Patricia Lago},
  year={2013},
  url={https://api.semanticscholar.org/CorpusID:17855436}
}

@article{shortcodepathrapl,
author = {H\"{a}hnel, Marcus and D\"{o}bel, Bj\"{o}rn and V\"{o}lp, Marcus and H\"{a}rtig, Hermann},
title = {Measuring energy consumption for short code paths using RAPL},
year = {2012},
issue_date = {December 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {3},
issn = {0163-5999},
url = {https://doi.org/10.1145/2425248.2425252},
doi = {10.1145/2425248.2425252},
abstract = {Measuring the energy consumption of software components is a major building block for generating models that allow for energy-aware scheduling, accounting and budgeting. Current measurement techniques focus on coarse-grained measurements of application or system events. However, fine grain adjustments in particular in the operating-system kernel and in application-level servers require power profiles at the level of a single software function. Until recently, this appeared to be impossible due to the lacking fine grain resolution and high costs of measurement equipment. In this paper we report on our experience in using the Running Average Power Limit (RAPL) energy sensors available in recent Intel CPUs for measuring energy consumption of short code paths. We investigate the granularity at which RAPL measurements can be performed and discuss practical obstacles that occur when performing these measurements on complex modern CPUs. Furthermore, we demonstrate how to use the RAPL infrastructure to characterize the energy costs for decoding video slices.},
journal = {SIGMETRICS Perform. Eval. Rev.},
month = {01},
pages = {13–17},
numpages = {5},
keywords = {RAPL, operating systems, power consumption}
}
@article{raplinaction,
author = {Khan, Kashif Nizam and Hirki, Mikael and Niemi, Tapio and Nurminen, Jukka K. and Ou, Zhonghong},
title = {RAPL in Action: Experiences in Using RAPL for Power Measurements},
year = {2018},
issue_date = {June 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {2},
issn = {2376-3639},
url = {https://doi.org/10.1145/3177754},
doi = {10.1145/3177754},
abstract = {To improve energy efficiency and comply with the power budgets, it is important to be able to measure the power consumption of cloud computing servers. Intel’s Running Average Power Limit (RAPL) interface is a powerful tool for this purpose. RAPL provides power limiting features and accurate energy readings for CPUs and DRAM, which are easily accessible through different interfaces on large distributed computing systems. Since its introduction, RAPL has been used extensively in power measurement and modeling. However, the advantages and disadvantages of RAPL have not been well investigated yet. To fill this gap, we conduct a series of experiments to disclose the underlying strengths and weaknesses of the RAPL interface by using both customized microbenchmarks and three well-known application level benchmarks: Stream, Stress-ng, and ParFullCMS. Moreover, to make the analysis as realistic as possible, we leverage two production-level power measurement datasets from the Taito, a supercomputing cluster of the Finnish Center of Scientific Computing and also replicate our experiments on Amazon EC2. Our results illustrate different aspects of RAPL and document the findings through comprehensive analysis. Our observations reveal that RAPL readings are highly correlated with plug power, promisingly accurate enough, and have negligible performance overhead. Experimental results suggest RAPL can be a very useful tool to measure and monitor the energy consumption of servers without deploying any complex power meters. We also show that there are still some open issues, such as driver support, non-atomicity of register updates, and unpredictable timings that might weaken the usability of RAPL in certain scenarios. For such scenarios, we pinpoint solutions and workarounds.},
journal = {ACM Trans. Model. Perform. Eval. Comput. Syst.},
month = {03},
articleno = {9},
numpages = {26},
keywords = {power modeling, RAPL validation, RAPL accuracy, RAPL, DRAM power}
}
@inproceedings{greentracker,
author = {Amsel, Nadine and Tomlinson, Bill},
title = {Green tracker: a tool for estimating the energy consumption of software},
year = {2010},
isbn = {9781605589305},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1753846.1753981},
doi = {10.1145/1753846.1753981},
abstract = {The energy consumption of computers has become an important environmental issue. This paper describes the development of Green Tracker, a tool that estimates the energy consumption of software in order to help concerned users make informed decisions about the software they use. We present preliminary results gathered from this system's initial usage. Ultimately the information gathered from this tool will be used to raise awareness and help make the energy consumption of software a more central concern among software developers.},
booktitle = {CHI '10 Extended Abstracts on Human Factors in Computing Systems},
pages = {3337–3342},
numpages = {6},
keywords = {green computing, green it, software, sustainability},
location = {Atlanta, Georgia, USA},
series = {CHI EA '10}
}
@article{powerapi, doi = {10.21105/joss.06670}, url = {https://doi.org/10.21105/joss.06670}, year = {2024}, publisher = {The Open Journal}, volume = {9}, number = {98}, pages = {6670}, author = {Guillaume Fieni and Daniel Romero Acero and Pierre Rust and Romain Rouvoy}, title = {PowerAPI: A Python framework for building software-defined power meters}, journal = {Journal of Open Source Software} } 

@inproceedings{profilingenergyprofilers,
author = {Jagroep, Erik and van der Werf, Jan Martijn E. M. and Jansen, Slinger and Ferreira, Miguel and Visser, Joost},
title = {Profiling energy profilers},
year = {2015},
isbn = {9781450331968},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2695664.2695825},
doi = {10.1145/2695664.2695825},
abstract = {While energy is directly consumed by hardware, it is the software that provides the instructions to do so. Energy profilers provide a means to measure the energy consumption of software, enabling the user to take measures in making software more sustainable. Although each energy profiler has access to roughly the same data, the reported measurements can differ significantly between energy profilers. In this research, energy profilers are evaluated through a series of experiments on their functionality and the accuracy of the reported measurements. The results show that there is still work to be done before these software tools can be safely used for their intended purpose. As a start, a correction factor is suggested for the energy profilers.},
booktitle = {Proceedings of the 30th Annual ACM Symposium on Applied Computing},
pages = {2198–2203},
numpages = {6},
keywords = {accuracy, energy profilers, sustainable software},
location = {Salamanca, Spain},
series = {SAC '15}
}
@inproceedings{calmenergyaccounting,
author = {Babakol, Timur and Canino, Anthony and Mahmoud, Khaled and Saxena, Rachit and Liu, Yu David},
title = {Calm energy accounting for multithreaded Java applications},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3409703},
doi = {10.1145/3368089.3409703},
abstract = {Energy accounting is a fundamental problem in energy management, defined as attributing global energy consumption to individual components of interest. In this paper, we take on this problem at the application level, where the components for accounting are application logical units, such as methods, classes, and packages. Given a Java application, our novel runtime system Chappie produces an energy footprint, i.e., the relative energy consumption of all programming abstraction units within the application.  The design of Chappie is unique in several dimensions. First, relative to targeted energy profiling where the profiler determines the energy consumption of a pre-defined application logical unit, e.g., a specific method, Chappie is total: the energy footprint encompasses all methods within an application. Second, Chappie is concurrency-aware: energy attribution is fully aware of the multi-threaded behavior of Java applications, including JVM bookkeeping threads. Third, Chappie is an embodiment of a novel philosophy for application-level energy accounting and profiling, which states that the accounting run should preserve the temporal phased power behavior of the application, and the spatial power distribution among the underlying hardware system. We term this important property as calmness. Against state-of-the-art DaCapo benchmarks, we show that the energy footprint generated by Chappie is precise while incurring negligible overhead. In addition, all results are produced with a high degree of calmness.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {976–988},
numpages = {13},
keywords = {Concurrency, Energy Accounting, Energy Profiling, Power Disturbance},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}
@INPROCEEDINGS{joularjx,
  author={Noureddine, Adel},
  booktitle={2022 18th International Conference on Intelligent Environments (IE)}, 
  title={PowerJoular and JoularJX: Multi-Platform Software Power Monitoring Tools}, 
  year={2022},
  volume={},
  number={},
  pages={1-4},
  keywords={Power demand;Codes;Operating systems;Linux;Writing;Software;Real-time systems;Power Monitoring;Measurement;Power Consumption;Energy Analysis},
  doi={10.1109/IE54923.2022.9826760}}
  
@misc{greenmetricstool,
    title={Green metrics tool},
    author={Green Coding Solutions GmbH},
    year={2022},
    url={https://github.com/green-coding-solutions/green-metrics-tool}
}

@misc{scaphandre,
    title={Green metrics tool},
    author={Hubblo},
    year={2020},
    url={https://github.com/hubblo-org/scaphandre}
}
% /Measurement
% Adapting green agile
@inproceedings{archdebt,
author = {Xiao, Lu and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Feng, Qiong},
title = {Identifying and quantifying architectural debt},
year = {2016},
isbn = {9781450339001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2884781.2884822},
doi = {10.1145/2884781.2884822},
abstract = {Our prior work showed that the majority of error-prone source files in a software system are architecturally connected. Flawed architectural relations propagate defects among these files and accumulate high maintenance costs over time, just like debts accumulate interest. We model groups of architecturally connected files that accumulate high maintenance costs as architectural debts. To quantify such debts, we formally define architectural debt, and show how to automatically identify debts, quantify their maintenance costs, and model these costs over time. We describe a novel history coupling probability matrix for this purpose, and identify architecture debts using 4 patterns of architectural flaws shown to correlate with reduced software quality. We evaluate our approach on 7 large-scale open source projects, and show that a significant portion of total project maintenance effort is consumed by paying interest on architectural debts. The top 5 architectural debts, covering a small portion (8\% to 25\%) of each project's error-prone files, capture a significant portion (20\% to 61\%) of each project's maintenance effort. Finally, we show that our approach reveals how architectural issues evolve into debts over time.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering},
pages = {488–498},
numpages = {11},
keywords = {software architecture, software quality, technical debt},
location = {Austin, Texas},
series = {ICSE '16}
}

@INPROCEEDINGS{refactorforenergyefficiency,
  author={Pinto, Gustavo and Soares-Neto, Francisco and Castor, Fernando},
  booktitle={2015 IEEE/ACM 4th International Workshop on Green and Sustainable Software}, 
  title={Refactoring for Energy Efficiency: A Reflection on the State of the Art}, 
  year={2015},
  volume={},
  number={},
  pages={29-35},
  keywords={Energy consumption;Programming;Engines;Computer languages;Graphics processing units},
  doi={10.1109/GREENS.2015.12}}

@INPROCEEDINGS{waste,
  author={Ibrahim, Siti Rohana Ahmad and Sallehudin, Hasimi and Yahaya, Jamaiah},
  booktitle={2023 International Conference on Electrical Engineering and Informatics (ICEEI)}, 
  title={Exploring Software Development Waste and Lean Approach in Green Perspective}, 
  year={2023},
  volume={},
  number={},
  pages={1-6},
  keywords={Waste reduction;Productivity;Manufacturing industries;Electrical engineering;Green products;Software;Product design;Green Lean;software development;waste management;sustainable development;environmental preservation},
  doi={10.1109/ICEEI59426.2023.10346869}}

@misc{greenwebGreenFoundation,
	author = {},
	title = {{T}he {G}reen {W}eb {F}oundation --- app.greenweb.org},
	howpublished = {\url{https://app.greenweb.org/directory/}},
	year = {},
	note = {[Accessed 09-09-2024]},
}
@article{sustainabilitydebt,
author = {Betz, Stefanie and Becker, Christoph and Chitchyan, Ruzanna and Duboc, Leticia and Easterbrook, Steve and Penzenstadler, Birgit and Seyff, N. and Venters, Colin},
year = {2015},
pages = {55-63},
title = {Sustainability debt: A metaphor to support Sustainability design decisions},
volume = {1416},
journal = {CEUR Workshop Proceedings}
}
@ARTICLE{skippedcommits,
  author={Abdalkareem, Rabe and Mujahid, Suhaib and Shihab, Emad and Rilling, Juergen},
  journal={IEEE Transactions on Software Engineering}, 
  title={Which Commits Can Be CI Skipped?}, 
  year={2021},
  volume={47},
  number={3},
  pages={448-463},
  keywords={Java;Software;Prototypes;Tools;Virtual machining;Data collection;Manuals;Continuous integration;travis CI;build status;mining software repository},
  doi={10.1109/TSE.2019.2897300}}
  
  @misc{sonarsourceLinterTool,
	author = {},
	title = {{L}inter {I}{D}{E} {T}ool \& {R}eal-{T}ime {S}oftware for {C}ode | {S}onar --- sonarsource.com},
	howpublished = {\url{https://www.sonarsource.com/products/sonarlint/}},
	year = {},
	note = {[Accessed 15-11-2024]},
}
@misc{pixelplumbingSharpHigh,
	author = {},
	title = {sharp - {H}igh performance {N}ode.js image processing --- sharp.pixelplumbing.com},
	howpublished = {\url{https://sharp.pixelplumbing.com/}},
	year = {},
	note = {[Accessed 24-11-2024]},
}
@misc{githubGitHubWebAssemblybinaryen,
	author = {},
	title = {{G}it{H}ub - {W}eb{A}ssembly/binaryen: {O}ptimizer and compiler/toolchain library for {W}eb{A}ssembly --- github.com},
	howpublished = {\url{https://github.com/WebAssembly/binaryen}},
	year = {},
	note = {[Accessed 24-11-2024]},
}
% /adapting green agile

% Validating
@misc{whisper,
      title={Robust Speech Recognition via Large-Scale Weak Supervision}, 
      author={Alec Radford and Jong Wook Kim and Tao Xu and Greg Brockman and Christine McLeavey and Ilya Sutskever},
      year={2022},
      eprint={2212.04356},
      archivePrefix={arXiv},
      primaryClass={eess.AS},
      url={https://arxiv.org/abs/2212.04356}, 
}
@misc{qualcoder,
    title={QualCoder 3.5},
    author={Colin Curtain},
    year={2023},
    url={https://github.com/ccbogel/QualCoder/releases/tag/3.5}
}
% /Validating